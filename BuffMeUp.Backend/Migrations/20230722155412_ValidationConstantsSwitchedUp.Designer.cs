// <auto-generated />
using System;
using BuffMeUp.Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BuffMeUp.Backend.Migrations
{
    [DbContext(typeof(BuffMeUpDbContext))]
    [Migration("20230722155412_ValidationConstantsSwitchedUp")]
    partial class ValidationConstantsSwitchedUp
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Auth.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "User"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Auth.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PersonalStatsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.HasKey("Id");

                    b.HasIndex("PersonalStatsId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1"),
                            Email = "admin@admin.admin",
                            FirstName = "Admin",
                            PasswordHash = "sfiPd/gT97ljx77CmIkTKw==;oQ2wf8+BIkgm3fDwIYj0dl+355CkyuYeTPXuCCfugA4=",
                            RoleId = 2,
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.FoodItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Carbs")
                        .HasColumnType("int");

                    b.Property<int>("Fats")
                        .HasColumnType("int");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("FoodItems");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.JT_Meal_FoodItem", b =>
                {
                    b.Property<Guid>("MealId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FoodItemId")
                        .HasColumnType("int");

                    b.Property<int>("Grams")
                        .HasColumnType("int");

                    b.HasKey("MealId", "FoodItemId");

                    b.HasIndex("FoodItemId");

                    b.ToTable("JT_Meal_FoodItem");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.Meal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.PersonalStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("CurrentWeight")
                        .HasColumnType("int");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<int>("GoalWeight")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("StartingWeight")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PersonalStats");

                    b.HasData(
                        new
                        {
                            Id = new Guid("36d33f78-dcba-46a7-955c-13e0cc73ec97"),
                            Age = 22,
                            CurrentWeight = 70,
                            Gender = true,
                            GoalWeight = 75,
                            Height = 175,
                            StartingWeight = 70,
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        });
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.ExerciseSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExerciseTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseTemplateId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("ExerciseSets");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.ExerciseTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ExerciseType")
                        .HasColumnType("int");

                    b.Property<bool>("IsGlobal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ExerciseTemplates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cffceeee-840d-44b1-ba78-37f25c4808e5"),
                            Description = "Lie on your back on a flat bench. Grip the bar with your hands slightly wider than shoulder-width apart. Lift the bar off the rack and position it above your chest with arms fully extended.",
                            ExerciseType = 1,
                            IsGlobal = true,
                            Name = "Bench Press",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("7423c92a-b60e-4439-b310-1ce945a07014"),
                            Description = "Stand with your mid-foot under the barbell. Bend over and grab the bar with a shoulder-width grip. Bend your knees until your shins touch the bar. Lift your chest up and straighten your lower back.",
                            ExerciseType = 0,
                            IsGlobal = true,
                            Name = "Deadlift",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("a04301d5-a004-4a84-95bf-5c72982bc9cc"),
                            Description = "Stand with your mid-foot under the barbell. Bend over and grab the bar with a shoulder-width grip. Bend your knees until your shins touch the bar. Lift your chest up and straighten your lower back.",
                            ExerciseType = 2,
                            IsGlobal = true,
                            Name = "Squat",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("ed30d261-c880-4a4c-a29d-ed858ac8cfab"),
                            Description = "Stand with the bar on your front shoulders, and your hands next to your shoulders. Press the bar over your head, until it’s balanced over your shoulders and mid-foot.",
                            ExerciseType = 3,
                            IsGlobal = true,
                            Name = "Overhead Press",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("8eb38f00-f8fc-4a3c-8cc3-0d06ca8e0658"),
                            Description = "Grab the pull-up bar with your palms down (shoulder-width grip). Hang to the pull-up bar with straight arms and your legs off the floor. Pull yourself up by pulling your elbows down to the floor.",
                            ExerciseType = 0,
                            IsGlobal = true,
                            Name = "Pull-up",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("65a45f26-77ba-4aa5-aadf-340698a0dd91"),
                            Description = "Stand up with your torso upright while holding a dumbbell on each hand being held at arms length. The elbows should be close to the torso. This will be your starting position.",
                            ExerciseType = 5,
                            IsGlobal = true,
                            Name = "Dumbbell Curl",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("484d6c42-5e62-4821-85ba-f528da3ac598"),
                            Description = "Attach a straight or angled bar to a high pulley and grab with an overhand grip at shoulder width. Standing upright with the torso straight and a very small inclination forward, bring the upper arms close to your body and perpendicular to the floor.",
                            ExerciseType = 4,
                            IsGlobal = true,
                            Name = "Triceps Pushdown",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        },
                        new
                        {
                            Id = new Guid("0ff467b8-3513-4907-92dd-6daa75c900e5"),
                            Description = "Lie on your back on the floor. Bend your legs and place feet firmly on the ground to stabilize your lower body. Cross your hands to opposite shoulders or place them behind your ears, without pulling on your neck.",
                            ExerciseType = 6,
                            IsGlobal = true,
                            Name = "Sit-up",
                            UserId = new Guid("41fc7ca7-c54c-4e7b-a68a-033f054b56d1")
                        });
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Auth.User", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.PersonalStats", "PersonalStats")
                        .WithMany()
                        .HasForeignKey("PersonalStatsId");

                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PersonalStats");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.FoodItem", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.User", "User")
                        .WithMany("FoodItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.JT_Meal_FoodItem", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Food.FoodItem", "FoodItem")
                        .WithMany()
                        .HasForeignKey("FoodItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuffMeUp.Backend.Data.Models.Food.Meal", "Meal")
                        .WithMany("Meal_FoodItem")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodItem");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.Meal", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.PersonalStats", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.ExerciseSet", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Workouts.ExerciseTemplate", "ExerciseTemplate")
                        .WithMany()
                        .HasForeignKey("ExerciseTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BuffMeUp.Backend.Data.Models.Workouts.Workout", "Workout")
                        .WithMany("ExerciseSets")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExerciseTemplate");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.ExerciseTemplate", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.User", "User")
                        .WithMany("ExerciseTemplates")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.Workout", b =>
                {
                    b.HasOne("BuffMeUp.Backend.Data.Models.Auth.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Auth.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Auth.User", b =>
                {
                    b.Navigation("ExerciseTemplates");

                    b.Navigation("FoodItems");

                    b.Navigation("Meals");

                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Food.Meal", b =>
                {
                    b.Navigation("Meal_FoodItem");
                });

            modelBuilder.Entity("BuffMeUp.Backend.Data.Models.Workouts.Workout", b =>
                {
                    b.Navigation("ExerciseSets");
                });
#pragma warning restore 612, 618
        }
    }
}
